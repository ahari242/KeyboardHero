@model KeyboardHero.Models.Song

@{
    ViewBag.Title = "Play";
}



<h1>Loading Song...</h1>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.0.4/howler.min.js"></script>
<script type="text/javascript" src="~/Scripts/songs/@(Model.title.ToLower()).js"></script>
@*<script type="text/javascript" src="~/Scripts/script.js"></script>*@

<script type="text/javascript">
    const songAudio = new Howl({
        src: ['../../audio/@(Model.file)'],
        autoplay: true,
        volume: 0,
        onplay: showStartButton
    });

    const miss1 = new Howl({
        src: ['../../audio/gh1.mp3'],
        autoplay: true,
        volume: 0
    });
    const miss2 = new Howl({
        src: ['../../audio/gh2.mp3'],
        autoplay: true,
        volume: 0
    });
    const miss3 = new Howl({
        src: ['../../audio/gh3.mp3'],
        autoplay: true,
        volume: 0
    });
    const miss4 = new Howl({
        src: ['../../audio/gh4.mp3'],
        autoplay: true,
        volume: 0
    });
    const miss5 = new Howl({
        src: ['../../audio/gh5.mp3'],
        autoplay: true,
        volume: 0
    });
    const miss6 = new Howl({
        src: ['../../audio/gh6.mp3'],
        autoplay: true,
        volume: 0
    });

    const streakStart = new Howl({
        src: ['../../audio/gh-fx/sp_deployedR.wav'],
        autoplay: true,
        volume: 0
    });

    const streakEnd = new Howl({
        src: ['../../audio/gh-fx/sp_awarded2R.wav'],
        autoplay: true,
        volume: 0
    });


    var bigStreak = false;
    var lastMissSound = 0;
    var hitStreak = 0;
    var throbDuration = (60 / @Model.bpm);

    var hits = 0;
    var misses = 0;
    var startTime = 0;
    var animationTime = 0;
    var noteCount = 0;
    animationTicker = 0;

    var modal = document.getElementById('myModal');

    function showStartButton() {
        document.querySelector(".modal-body").innerHTML = "<button class='start-button'>Start</button>";
        document.querySelector(".start-button").onclick = startGame;
    }


    document.addEventListener("keydown", function (event) {
        if (event.which == 13 || event.keyCode == 13) {
            startGame();
        }
    });




    function addKeyEventListeners() {
        document.addEventListener("keydown", function (event) {
            switch (event.key) {
                case "t":
                    handlePoints(0);
                    break;
                case "y":
                    handlePoints(1);
                    break;
                case "u":
                    handlePoints(2);
                    break;
                case "i":
                    handlePoints(3);
                    break;
                case "o":
                    handlePoints(4);
                    break;
                case "p":
                    handlePoints(5);
                    break;
                case "[":
                    handlePoints(6);
                    break;
                case "]":
                    handlePoints(7);
                    break;
                default:
                    break;
            }
        });

        //touch support
        let keys = document.getElementsByClassName("key");
        for (var i = 0; i < keys.length; i++)
        {
            keys[i].index = i;
            keys[i].addEventListener("click",function(){
                handlePoints(this.index);
            });
        }
    }

    function startGame() {
        addKeyEventListeners();
        modal.style.display = "none";
        songAudio.stop();
        songAudio.volume(0.1);

        miss1.volume(1);
        miss2.volume(1);
        miss3.volume(1);
        miss4.volume(1);
        miss5.volume(1);
        miss6.volume(1);
        streakStart.volume(0.025);
        streakEnd.volume(0.3);

        var firstTimer = setTimeout(function () {
            songAudio.play();
            startTime = new Date().getTime();
            animationInterval();
        }, 2000);
        song.keys.forEach(function (keyArray, index) {
            keyArray.forEach(function (number) {
                noteCount += 1;
                //document.querySelector("#note-count").innerHTML = noteCount;
                const targetTime = ((number - 1) * song.milliseconds);
                if (targetTime < 4000) {
                    var div = document.createElement("div");
                    div.classList.add("note");
                    div.style.animation = "noteanimation 1s " + (targetTime + 1000) + "ms linear";
                    div.id = targetTime;
                    const columnNumber = index + 1;
                    const noteColumn = document.querySelector(".column-" + columnNumber);
                    noteColumn.appendChild(div);
                }
            });
        });
    }

    function animationInterval() {
        const interval = 2000;
        var expected = Date.now() + interval;
        function step() {
            var dt = Date.now() - expected;
            if (dt > interval) {
                console.log("There was a problem with the interval.");
            }
            animateNotes();
            expected += interval;
            setTimeout(step, Math.max(0, interval - dt));
        }
        setTimeout(step, interval);
    }

    function animateNotes() {
        animationTicker += 2000;
        const notes = document.querySelectorAll(".note");
        notes.forEach(function (note) {
            if (note.id < animationTicker) {
                note.parentNode.removeChild(note);
            }
        });

        song.keys.forEach(function (keyArray, index) {
            keyArray.forEach(function (number, i) {
                var targetTime = song.milliseconds * (number - 1);
                //check if its time to draw the key to the column
                if (targetTime >= (animationTicker + 2000) && targetTime < (animationTicker + 4000)) {
                    var div = document.createElement("div");
                    div.classList.add("note");
                    //div.innerHTML = number;
                    const time = targetTime - (animationTicker + 1000);
                    div.style.animation = "noteanimation 1s " + Math.abs(time) + "ms linear";
                    div.id = targetTime;
                    const columnNumber = index + 1;
                    const noteColumn = document.querySelector(".column-" + columnNumber);
                    noteColumn.appendChild(div);
                }
            });
        });
    }

    function handlePoints(index) {
        const now = new Date().getTime();
        if (song.keys[index].length === 0) {
            missPoint(index);
        }
        song.keys[index].some(function (number, i) {
            const targetTime = song.milliseconds * (number - 1);
            const difference = (now - startTime) - targetTime;
            if (Math.abs(difference) <= 150) {
                song.keys[index].splice(i, 1);
                hitPoint(index);
                return true;
            } else if (i === (song.keys[index].length - 1)) {
                missPoint(index);
            }
        });
    }

    function hitPoint(index) {
        hitStreak++;

        hits += 1;
        document.querySelector("#hits").innerHTML = hits;
        animateHitAndMiss(index + 1, "hit");
    }

    function missPoint(index) {

        misses += 1;
        let missToPlay = lastMissSound + 1;
        if (missToPlay > 6)
        {
            missToPlay = 1;
        }

        switch (missToPlay) {
            case 1:
                miss1.play();
                break;
            case 2:
                miss2.play();
                break;
            case 3:
                miss3.play();
                break;
            case 4:
                miss4.play();
                break;
            case 5:
                miss5.play();
                break;
            case 6:
                miss6.play();
                break;
        }

        lastMissSound = missToPlay;

        document.querySelector("#misses").innerHTML = misses;
        animateHitAndMiss(index + 1, "miss");
    }

    function animateHitAndMiss(key, action) {

        if (action == "miss") {

            if (bigStreak)
            {
                bigStreak = false;
                streakEnd.play();
                document.getElementById('cloud-bg').style.opacity = 0;
                document.getElementById('sun').style.opacity = 0;
                document.getElementById('background').style.background = "linear-gradient(0deg, #111 0%, #232323 50%)";
                document.getElementById("hits").style.animation = "none";
            }

            hitStreak = 0;

            document.getElementById("rainbow-bg").style.opacity = hitStreak;

        }
            //on hit
        else {
            if (hitStreak > 24 && hitStreak < 50) {
                
                if (!bigStreak)
                {
                    bigStreak = true;
                    streakStart.play();
                    document.getElementById('background').style.background = "linear-gradient(0deg, #ccc 0%, #999 50%)";
                    document.getElementById("hits").style.animation = "throbbing " + throbDuration  + "s linear infinite";
                    
                    setTimeout(document.getElementById('cloud-bg').style.opacity = 1, 1000);

                    document.getElementById('sun').style.opacity = 1;

                }

                
                
                
            }

            if (hitStreak > 49)
            {
                document.getElementById('cloud-bg').style.background = "transparent";
                document.getElementById("rainbow-bg").style.opacity = 1;
            }

        }


        const keyDiv = document.querySelector(".key-" + key);
        const columnDiv = document.querySelector(".column-" + key);
        if (keyDiv.style.animation) {
            keyDiv.style.animation = "";
        }
        keyDiv.style.animation = action + "-flash linear 0.15s 1";
        setTimeout(function () { keyDiv.style.animation = ""; }, 125);
        if (columnDiv.style.animation) {
            columnDiv.style.animation = "";
        }
        columnDiv.style.animation = action + "-column-flash linear 0.15s 1";
        setTimeout(function () { columnDiv.style.animation = ""; }, 125);
    }

</script>